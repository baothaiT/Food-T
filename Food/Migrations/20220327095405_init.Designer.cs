// <auto-generated />
using System;
using Food.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Food.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220327095405_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Food.Entity.About", b =>
                {
                    b.Property<int>("about_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("about_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("about_Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("about_id");

                    b.ToTable("About");

                    b.HasData(
                        new
                        {
                            about_id = 1,
                            about_Description = "The Big Oxmox advised her not to do so, because there were thousands of bad Commas, wild Question Marks and devious Semikoli, but the Little Blind Text didn’t listen. She packed her seven versalia, put her initial into the belt and made herself on the way. \n \n When she reached the first hills of the Italic Mountains, she had a last view back on the skyline of her hometown Bookmarksgrove,the headline of Alphabet Village and the subline of her own road,the Line Lane.Pityful a rethoric question ran over her cheek,then she continued her way.",
                            about_Title = "Footwear the leading eCommerce Store around the Globe",
                            about_Url = "https://www.youtube.com/watch?v=F1vcruph8JA"
                        });
                });

            modelBuilder.Entity("Food.Entity.Bills", b =>
                {
                    b.Property<string>("bill_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_Cancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Confirmation")
                        .HasColumnType("bit");

                    b.Property<DateTime>("bill_DatetimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<bool>("bill_Delivered")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_Delivering")
                        .HasColumnType("bit");

                    b.Property<int>("bill_Discount")
                        .HasColumnType("int");

                    b.Property<bool>("bill_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("bill_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_PaidTotal")
                        .HasColumnType("int");

                    b.Property<string>("bill_PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductColorlist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductIdlist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductNamelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductPricelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_ProductSizelist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("bill_Shipping")
                        .HasColumnType("int");

                    b.Property<string>("bill_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("bill_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.Property<bool>("bill_WaitPickup")
                        .HasColumnType("bit");

                    b.HasKey("bill_Id");

                    b.HasIndex("bill_UserId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            bill_Id = "D269BF93-A5E2-4C4A-8146-9967DDE80D30",
                            bill_Cancelled = false,
                            bill_Confirmation = true,
                            bill_DatetimeOrder = new DateTime(2022, 3, 27, 16, 54, 5, 84, DateTimeKind.Local).AddTicks(1367),
                            bill_Delivered = false,
                            bill_Delivering = false,
                            bill_Discount = 0,
                            bill_HideStatus = false,
                            bill_Note = "",
                            bill_PaidTotal = 2000,
                            bill_PaymentMethod = "Check Payment",
                            bill_ProductColorlist = "Blue|Red|Black|Green",
                            bill_ProductIdlist = "1|2|3|4",
                            bill_ProductNamelist = "product 1|product 2| product 3| product 4",
                            bill_ProductPricelist = "550|450|350|640",
                            bill_ProductSizelist = "7|8|9|14",
                            bill_Quantity = "1|1|2|1",
                            bill_Shipping = 10,
                            bill_UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            bill_WaitForConfirmation = false,
                            bill_WaitPickup = false
                        });
                });

            modelBuilder.Entity("Food.Entity.Cart", b =>
                {
                    b.Property<string>("cart_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cart_UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cart_Id");

                    b.HasIndex("cart_UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            cart_Id = "72309286-ECBB-4D20-AD95-2819D31E3400",
                            cart_UserID = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff"
                        },
                        new
                        {
                            cart_Id = "D355458F-1DD3-4834-AA28-6DA34B6357FF",
                            cart_UserID = "DE544998-A3CC-4E12-ABB4-0642E57BD222"
                        });
                });

            modelBuilder.Entity("Food.Entity.CartsDevice", b =>
                {
                    b.Property<string>("cartd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cartd_DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cartd_Id");

                    b.HasIndex("cartd_DeviceId");

                    b.ToTable("CartsDevice");
                });

            modelBuilder.Entity("Food.Entity.Categories", b =>
                {
                    b.Property<string>("cg_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cg_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Sale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cg_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cg_Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            cg_Id = "5cdf0157-f926-4cee-8c0d-268869ec7535",
                            cg_Name = "Dry food",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "5e5a86ef-7fe8-433a-9dbd-092841f3101d",
                            cg_Name = "Food",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "cdd3cbfd-6330-4203-9cec-e9b40596bf41",
                            cg_Name = "Drink",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "1ab851e8-2e58-4182-9d1e-6cad09a65cd8",
                            cg_Name = "Banhmi",
                            cg_Sale = "",
                            cg_Type = ""
                        },
                        new
                        {
                            cg_Id = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c",
                            cg_Name = "AnVat",
                            cg_Sale = "",
                            cg_Type = ""
                        });
                });

            modelBuilder.Entity("Food.Entity.ContactSystem", b =>
                {
                    b.Property<int>("Contact_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Contact_Id");

                    b.ToTable("ContactSystems");

                    b.HasData(
                        new
                        {
                            Contact_Id = 1,
                            Contact_Address = " 123, An Lac A Ward, Binh Tan District, HCM",
                            Contact_Email = "admin@gmail.com",
                            Contact_Phone = "0123456789",
                            Contact_Website = "https://shoes.com"
                        });
                });

            modelBuilder.Entity("Food.Entity.ContactUsers", b =>
                {
                    b.Property<string>("cu_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("cu_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cu_Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cu_Id");

                    b.ToTable("ContactUsers");

                    b.HasData(
                        new
                        {
                            cu_Id = "37451dc1-6e9c-49d2-9560-7c33d2fa07f8",
                            cu_Description = "Description",
                            cu_Email = "Email",
                            cu_FirstName = "FirstName",
                            cu_LastName = "LastName",
                            cu_Subject = "Subject"
                        });
                });

            modelBuilder.Entity("Food.Entity.Coupons", b =>
                {
                    b.Property<string>("couponId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("couponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("couponPrice")
                        .HasColumnType("int");

                    b.HasKey("couponId");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            couponId = "665a7f1c-29b5-40de-96c9-5d210210891a",
                            couponCode = "code10",
                            couponPrice = 10
                        },
                        new
                        {
                            couponId = "1ccb0573-a8e7-4eb7-8f8e-b9b4278bc190",
                            couponCode = "code50",
                            couponPrice = 50
                        });
                });

            modelBuilder.Entity("Food.Entity.Device", b =>
                {
                    b.Property<string>("deviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("deviceAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("devicePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("devicePostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceState")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("deviceId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Food.Entity.ProductInCart", b =>
                {
                    b.Property<string>("pic_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pic_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pic_amount")
                        .HasColumnType("int");

                    b.Property<string>("pic_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic_size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pic_CartId", "pic_ProductId");

                    b.HasIndex("pic_ProductId");

                    b.ToTable("ProductInCart");
                });

            modelBuilder.Entity("Food.Entity.ProductInCartDevices", b =>
                {
                    b.Property<string>("picd_CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("picd_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("picd_amount")
                        .HasColumnType("int");

                    b.Property<string>("picd_color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picd_size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("picd_CartId", "picd_ProductId");

                    b.HasIndex("picd_ProductId");

                    b.ToTable("ProductInCartDevices");
                });

            modelBuilder.Entity("Food.Entity.Products", b =>
                {
                    b.Property<string>("pd_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pd_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Img4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pd_NameImg4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pd_Price")
                        .HasColumnType("int");

                    b.Property<int>("pd_Rate")
                        .HasColumnType("int");

                    b.Property<int>("pd_ReducePrice")
                        .HasColumnType("int");

                    b.Property<string>("pd_ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("pd_WaitForConfirmation")
                        .HasColumnType("bit");

                    b.HasKey("pd_Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            pd_Id = "a9c749f6-2061-480c-92bc-03a9e9765827",
                            pd_Description = "BanhCanhCua",
                            pd_Img1 = "/images/item250x300/BanhCanhCua.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "BanhCanhCua",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "3f5af47f-6450-4225-b778-1d119d990dab",
                            pd_Description = "BanhMi",
                            pd_Img1 = "/images/item250x300/BanhMi.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "BanhMi",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "120312c5-8af8-4710-9ecf-a79841832f9d",
                            pd_Description = "banhtrangtron",
                            pd_Img1 = "/images/item250x300/banhtrangtron.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "banhtrangtron",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "ba30527a-5dd9-49a2-93b6-798a712c0363",
                            pd_Description = "banhuotlongdalat",
                            pd_Img1 = "/images/item250x300/banhuotlongdalat.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "banhuotlongdalat",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "9a7fc83d-2cb3-4bc6-b30f-785bb24b6687",
                            pd_Description = "BoKho",
                            pd_Img1 = "/images/item250x300/BoKho.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "BoKho",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "8cba0f53-c9ad-4beb-acb5-f8d31798e7bc",
                            pd_Description = "bunbo",
                            pd_Img1 = "/images/item250x300/bunbo.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "bunbo",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "e0d591b8-ef77-49f6-bcb6-e7298a4a2a43",
                            pd_Description = "bundaumamtom",
                            pd_Img1 = "/images/item250x300/bundaumamtom.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "bundaumamtom",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "74d45f46-b0aa-4d89-99b8-c087588ba1cd",
                            pd_Description = "Bunxaochay",
                            pd_Img1 = "/images/item250x300/Bunxaochay.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Bunxaochay",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "d94dd18b-1a33-478e-86a6-70e2b27ba342",
                            pd_Description = "cocosummer",
                            pd_Img1 = "/images/item250x300/cocosummer.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "cocosummer",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "c8fec1d2-f5aa-4963-9122-b7ea0e0ab2ac",
                            pd_Description = "comboxao",
                            pd_Img1 = "/images/item250x300/comboxao.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "comboxao",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "c23b5b1c-a0cc-4b90-89f3-2aa80c83082f",
                            pd_Description = "comga",
                            pd_Img1 = "/images/item250x300/comga.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "comga",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "5218aca2-53fa-4c38-8ed6-c26fbb41fe16",
                            pd_Description = "comgadenhat",
                            pd_Img1 = "/images/item250x300/comgadenhat.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "comgadenhat",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "3eb1c238-494e-4bb8-a59a-3fe01ba56728",
                            pd_Description = "denhatthitnuong",
                            pd_Img1 = "/images/item250x300/denhatthitnuong.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "denhatthitnuong",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "6d9d0e83-81c6-4266-a5f5-28e1341b37c4",
                            pd_Description = "goicuon",
                            pd_Img1 = "/images/item250x300/goicuon.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "goicuon",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "bb20a56f-bab5-4450-b78f-d4bf6df2f74b",
                            pd_Description = "kfc",
                            pd_Img1 = "/images/item250x300/kfc.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "kfc",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "c03d9f44-ebf7-4cbd-8178-e1539cdf99cb",
                            pd_Description = "KimBap",
                            pd_Img1 = "/images/item250x300/KimBap.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "KimBap",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "065d6174-c7fa-4f0c-945f-0436853e2e13",
                            pd_Description = "loteria",
                            pd_Img1 = "/images/item250x300/loteria.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "loteria",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "9d2d219c-060a-4c69-bd1a-0317a0457b09",
                            pd_Description = "mitronanvat",
                            pd_Img1 = "/images/item250x300/mitronanvat.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "mitronanvat",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "1fad5181-859f-48b1-a2bf-baea3a2686cd",
                            pd_Description = "monngontrangbang",
                            pd_Img1 = "/images/item250x300/monngontrangbang.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "monngontrangbang",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "0a24a10f-aaa2-4697-a20b-00099b3ccc28",
                            pd_Description = "ParisBaguete",
                            pd_Img1 = "/images/item250x300/ParisBaguete.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "ParisBaguete",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "fb2990c2-2576-4985-9ac8-8e62aa011ef2",
                            pd_Description = "pizza",
                            pd_Img1 = "/images/item250x300/pizza.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "pizza",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "5923ff7d-8683-462f-89fe-5d7bc96d3a4f",
                            pd_Description = "quanngontrangbang",
                            pd_Img1 = "/images/item250x300/quanngontrangbang.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "quanngontrangbang",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "3d9d9f5e-1d63-4bfd-9a85-285a6e1b2883",
                            pd_Description = "RauMaMix",
                            pd_Img1 = "/images/item250x300/RauMaMix.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "RauMaMix",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "c8b7d3e7-242f-4605-bd7d-28580bb3ba02",
                            pd_Description = "Royaltea",
                            pd_Img1 = "/images/item250x300/Royaltea.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Royaltea",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "b09685bb-3f4f-4231-b785-008ef396f699",
                            pd_Description = "Sanfulou",
                            pd_Img1 = "/images/item250x300/Sanfulou.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Sanfulou",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "edbc571d-eb59-4f20-a75d-63b6ee399dca",
                            pd_Description = "stacbuk-cf",
                            pd_Img1 = "/images/item250x300/stacbuk-cf.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "stacbuk-cf",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "cf811136-0ba1-4ddf-8785-c6d45ddf041a",
                            pd_Description = "trasuanhalam",
                            pd_Img1 = "/images/item250x300/trasuanhalam.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "trasuanhalam",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        },
                        new
                        {
                            pd_Id = "fc079fd4-5e64-4d30-8474-a43ab98eb045",
                            pd_Description = "Xoixeoba3beo",
                            pd_Img1 = "/images/item250x300/Xoixeoba3beo.png",
                            pd_Img2 = "",
                            pd_Img3 = "",
                            pd_Img4 = "",
                            pd_Name = "Xoixeoba3beo",
                            pd_NameImg1 = "1",
                            pd_NameImg2 = "2",
                            pd_NameImg3 = "3",
                            pd_NameImg4 = "4",
                            pd_Price = 1,
                            pd_Rate = 5,
                            pd_ReducePrice = 0,
                            pd_ShortDescription = "Short Description",
                            pd_WaitForConfirmation = false
                        });
                });

            modelBuilder.Entity("Food.Entity.ProductsInCategories", b =>
                {
                    b.Property<string>("pic_productId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pic_CategoriesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("pic_productId", "pic_CategoriesId");

                    b.HasIndex("pic_CategoriesId");

                    b.ToTable("ProductsInCategories");

                    b.HasData(
                        new
                        {
                            pic_productId = "e0d591b8-ef77-49f6-bcb6-e7298a4a2a43",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "74d45f46-b0aa-4d89-99b8-c087588ba1cd",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "c8fec1d2-f5aa-4963-9122-b7ea0e0ab2ac",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "c23b5b1c-a0cc-4b90-89f3-2aa80c83082f",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "5218aca2-53fa-4c38-8ed6-c26fbb41fe16",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "3eb1c238-494e-4bb8-a59a-3fe01ba56728",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "6d9d0e83-81c6-4266-a5f5-28e1341b37c4",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "c03d9f44-ebf7-4cbd-8178-e1539cdf99cb",
                            pic_CategoriesId = "5cdf0157-f926-4cee-8c0d-268869ec7535"
                        },
                        new
                        {
                            pic_productId = "a9c749f6-2061-480c-92bc-03a9e9765827",
                            pic_CategoriesId = "5e5a86ef-7fe8-433a-9dbd-092841f3101d"
                        },
                        new
                        {
                            pic_productId = "ba30527a-5dd9-49a2-93b6-798a712c0363",
                            pic_CategoriesId = "5e5a86ef-7fe8-433a-9dbd-092841f3101d"
                        },
                        new
                        {
                            pic_productId = "9a7fc83d-2cb3-4bc6-b30f-785bb24b6687",
                            pic_CategoriesId = "5e5a86ef-7fe8-433a-9dbd-092841f3101d"
                        },
                        new
                        {
                            pic_productId = "8cba0f53-c9ad-4beb-acb5-f8d31798e7bc",
                            pic_CategoriesId = "5e5a86ef-7fe8-433a-9dbd-092841f3101d"
                        },
                        new
                        {
                            pic_productId = "1fad5181-859f-48b1-a2bf-baea3a2686cd",
                            pic_CategoriesId = "5e5a86ef-7fe8-433a-9dbd-092841f3101d"
                        },
                        new
                        {
                            pic_productId = "3d9d9f5e-1d63-4bfd-9a85-285a6e1b2883",
                            pic_CategoriesId = "cdd3cbfd-6330-4203-9cec-e9b40596bf41"
                        },
                        new
                        {
                            pic_productId = "c8b7d3e7-242f-4605-bd7d-28580bb3ba02",
                            pic_CategoriesId = "cdd3cbfd-6330-4203-9cec-e9b40596bf41"
                        },
                        new
                        {
                            pic_productId = "edbc571d-eb59-4f20-a75d-63b6ee399dca",
                            pic_CategoriesId = "cdd3cbfd-6330-4203-9cec-e9b40596bf41"
                        },
                        new
                        {
                            pic_productId = "cf811136-0ba1-4ddf-8785-c6d45ddf041a",
                            pic_CategoriesId = "cdd3cbfd-6330-4203-9cec-e9b40596bf41"
                        },
                        new
                        {
                            pic_productId = "3f5af47f-6450-4225-b778-1d119d990dab",
                            pic_CategoriesId = "1ab851e8-2e58-4182-9d1e-6cad09a65cd8"
                        },
                        new
                        {
                            pic_productId = "9d2d219c-060a-4c69-bd1a-0317a0457b09",
                            pic_CategoriesId = "1ab851e8-2e58-4182-9d1e-6cad09a65cd8"
                        },
                        new
                        {
                            pic_productId = "120312c5-8af8-4710-9ecf-a79841832f9d",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "d94dd18b-1a33-478e-86a6-70e2b27ba342",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "bb20a56f-bab5-4450-b78f-d4bf6df2f74b",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "065d6174-c7fa-4f0c-945f-0436853e2e13",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "0a24a10f-aaa2-4697-a20b-00099b3ccc28",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "fb2990c2-2576-4985-9ac8-8e62aa011ef2",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "5923ff7d-8683-462f-89fe-5d7bc96d3a4f",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "b09685bb-3f4f-4231-b785-008ef396f699",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        },
                        new
                        {
                            pic_productId = "fc079fd4-5e64-4d30-8474-a43ab98eb045",
                            pic_CategoriesId = "bafb64c2-e3f6-4f73-b617-1cbedc1a7d7c"
                        });
                });

            modelBuilder.Entity("Food.Entity.ReviewInproduct", b =>
                {
                    b.Property<string>("rip_ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("rip_ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("rip_ProductId", "rip_ReviewId");

                    b.HasIndex("rip_ReviewId");

                    b.ToTable("ReviewInproduct");

                    b.HasData(
                        new
                        {
                            rip_ProductId = "a9c749f6-2061-480c-92bc-03a9e9765827",
                            rip_ReviewId = "EEBA6608-AB75-4E83-909F-604B1A06F16C"
                        },
                        new
                        {
                            rip_ProductId = "a9c749f6-2061-480c-92bc-03a9e9765827",
                            rip_ReviewId = "9EED8607-D2BB-45EE-AEE3-C59D858A7F97"
                        },
                        new
                        {
                            rip_ProductId = "a9c749f6-2061-480c-92bc-03a9e9765827",
                            rip_ReviewId = "C2A543C2-B1E2-4DC5-A131-9137E4673FA6"
                        });
                });

            modelBuilder.Entity("Food.Entity.Reviews", b =>
                {
                    b.Property<string>("review_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("review_Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("review_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("review_ReviewType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("review_UploadTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("review_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("review_id");

                    b.HasIndex("review_UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            review_id = "EEBA6608-AB75-4E83-909F-604B1A06F16C",
                            review_Comment = "Good1",
                            review_HideStatus = false,
                            review_ReviewType = "Review",
                            review_UploadTime = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            review_UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222"
                        },
                        new
                        {
                            review_id = "9EED8607-D2BB-45EE-AEE3-C59D858A7F97",
                            review_Comment = "Good2",
                            review_HideStatus = false,
                            review_ReviewType = "Review",
                            review_UploadTime = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            review_UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff"
                        },
                        new
                        {
                            review_id = "C2A543C2-B1E2-4DC5-A131-9137E4673FA6",
                            review_Comment = "Good3",
                            review_HideStatus = false,
                            review_ReviewType = "Review",
                            review_UploadTime = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            review_UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222"
                        });
                });

            modelBuilder.Entity("Food.Entity.Shipping", b =>
                {
                    b.Property<string>("ship_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ship_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ship_Price")
                        .HasColumnType("int");

                    b.HasKey("ship_Id");

                    b.ToTable("Shipping");

                    b.HasData(
                        new
                        {
                            ship_Id = "7CF94A7D-9239-446E-A404-086518F84652",
                            ship_Name = "Ship",
                            ship_Price = 5
                        });
                });

            modelBuilder.Entity("Food.Entity.SubReview", b =>
                {
                    b.Property<string>("subReview_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("subReview_Commnet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("subReview_DateCommnet")
                        .HasColumnType("datetime2");

                    b.Property<bool>("subReview_HideStatus")
                        .HasColumnType("bit");

                    b.Property<string>("subReview_UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("subreview_SubReviewType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("subReview_Id");

                    b.HasIndex("subReview_UserId");

                    b.ToTable("SubReview");

                    b.HasData(
                        new
                        {
                            subReview_Id = "2ca419fc-4b35-4518-8d18-9b39560a1e6d",
                            subReview_Commnet = "subreview 1",
                            subReview_DateCommnet = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            subReview_HideStatus = false,
                            subReview_UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            subreview_SubReviewType = "SubReview"
                        },
                        new
                        {
                            subReview_Id = "12fc521d-eb34-4bd3-ba2b-323c7926fdb1",
                            subReview_Commnet = "subreview 3",
                            subReview_DateCommnet = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            subReview_HideStatus = false,
                            subReview_UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            subreview_SubReviewType = "SubReview"
                        },
                        new
                        {
                            subReview_Id = "89268107-ed74-4c1b-be56-bcc04d98996f",
                            subReview_Commnet = "subreview 3",
                            subReview_DateCommnet = new DateTime(2020, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            subReview_HideStatus = false,
                            subReview_UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            subreview_SubReviewType = "SubReview"
                        });
                });

            modelBuilder.Entity("Food.Entity.SubReviewInReview", b =>
                {
                    b.Property<string>("SRiR_ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SRiR_SubReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SRiR_ReviewId", "SRiR_SubReviewId");

                    b.HasIndex("SRiR_SubReviewId");

                    b.ToTable("SubReviewInReview");

                    b.HasData(
                        new
                        {
                            SRiR_ReviewId = "EEBA6608-AB75-4E83-909F-604B1A06F16C",
                            SRiR_SubReviewId = "2ca419fc-4b35-4518-8d18-9b39560a1e6d"
                        },
                        new
                        {
                            SRiR_ReviewId = "EEBA6608-AB75-4E83-909F-604B1A06F16C",
                            SRiR_SubReviewId = "12fc521d-eb34-4bd3-ba2b-323c7926fdb1"
                        },
                        new
                        {
                            SRiR_ReviewId = "9EED8607-D2BB-45EE-AEE3-C59D858A7F97",
                            SRiR_SubReviewId = "89268107-ed74-4c1b-be56-bcc04d98996f"
                        });
                });

            modelBuilder.Entity("Food.Entity.SubscribeEmail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubscribeEmail");
                });

            modelBuilder.Entity("Food.Models.UserInRoleModel", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserInRoleModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            RoleId = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd"
                        },
                        new
                        {
                            UserId = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            RoleId = "360E601E-92F2-4F08-832B-604A21293258"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Food.Entity.AppRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Roles");

                    b.HasDiscriminator().HasValue("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb4fd",
                            ConcurrencyStamp = "6f546fd5-4af1-4473-a1bf-f897383a5f0a",
                            Name = "Staff",
                            NormalizedName = "staff",
                            Description = "Staff"
                        },
                        new
                        {
                            Id = "360E601E-92F2-4F08-832B-604A21293258",
                            ConcurrencyStamp = "d4811b8c-9fe9-4a4d-8c9e-19753dae3b33",
                            Name = "Admin",
                            NormalizedName = "admin",
                            Description = "Admin"
                        });
                });

            modelBuilder.Entity("Food.Entity.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bill_State")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "DE544998-A3CC-4E12-ABB4-0642E57BD222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7906de88-71f3-4f3c-b642-978857897ffe",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECfLjEdEpVAskBJ074THpZimkPiJkd3dRyFOik05rmjAClukC/LAAwiy/zPIOrBr4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a93dae3d-2764-4395-a8b4-4091bf82b8f6",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            DoB = new DateTime(2020, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "admin",
                            LastName = "admin"
                        },
                        new
                        {
                            Id = "f49e4348-718f-43e3-b1f6-6dc89c5Bb5ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d3e3f0e-831a-4ab9-9dbb-6f18001cc62c",
                            Email = "staff@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STAFF@GMAIL.COM",
                            NormalizedUserName = "STAFF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmWZKeTMMFQ8Zeg4xtYSCFSf79uokpQ+OPMnJcknoQyQPTS4xFKyXB9Z5A1vVS5xw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "405b52da-ab1d-4176-96fb-ab4204401bc3",
                            TwoFactorEnabled = false,
                            UserName = "Staff",
                            DoB = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "staff",
                            LastName = "staff"
                        });
                });

            modelBuilder.Entity("Food.Entity.Bills", b =>
                {
                    b.HasOne("Food.Entity.AppUser", "AppUserB")
                        .WithMany("BillsAU")
                        .HasForeignKey("bill_UserId");

                    b.Navigation("AppUserB");
                });

            modelBuilder.Entity("Food.Entity.Cart", b =>
                {
                    b.HasOne("Food.Entity.AppUser", "AppUserC")
                        .WithMany("CartU")
                        .HasForeignKey("cart_UserID");

                    b.Navigation("AppUserC");
                });

            modelBuilder.Entity("Food.Entity.CartsDevice", b =>
                {
                    b.HasOne("Food.Entity.Device", "DeviceCD")
                        .WithMany("CartsDeviceD")
                        .HasForeignKey("cartd_DeviceId");

                    b.Navigation("DeviceCD");
                });

            modelBuilder.Entity("Food.Entity.ProductInCart", b =>
                {
                    b.HasOne("Food.Entity.Cart", "CartPICart")
                        .WithMany("ProductInCartC")
                        .HasForeignKey("pic_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Food.Entity.Products", "ProductsPICart")
                        .WithMany("ProductInCartP")
                        .HasForeignKey("pic_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartPICart");

                    b.Navigation("ProductsPICart");
                });

            modelBuilder.Entity("Food.Entity.ProductInCartDevices", b =>
                {
                    b.HasOne("Food.Entity.CartsDevice", "CartsDevicePICD")
                        .WithMany("ProductInCartDevicesCD")
                        .HasForeignKey("picd_CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Food.Entity.Products", "ProductsPICD")
                        .WithMany("ProductInCartDevicesP")
                        .HasForeignKey("picd_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartsDevicePICD");

                    b.Navigation("ProductsPICD");
                });

            modelBuilder.Entity("Food.Entity.ProductsInCategories", b =>
                {
                    b.HasOne("Food.Entity.Categories", "CategoriesPIC")
                        .WithMany("ProductsInCategoriesC")
                        .HasForeignKey("pic_CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Food.Entity.Products", "ProductsPIC")
                        .WithMany("ProductsInCategoriesP")
                        .HasForeignKey("pic_productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriesPIC");

                    b.Navigation("ProductsPIC");
                });

            modelBuilder.Entity("Food.Entity.ReviewInproduct", b =>
                {
                    b.HasOne("Food.Entity.Products", "ProductsRIP")
                        .WithMany("ReviewInproductP")
                        .HasForeignKey("rip_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Food.Entity.Reviews", "ReviewsRIP")
                        .WithMany("ReviewInproductR")
                        .HasForeignKey("rip_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductsRIP");

                    b.Navigation("ReviewsRIP");
                });

            modelBuilder.Entity("Food.Entity.Reviews", b =>
                {
                    b.HasOne("Food.Entity.AppUser", "AppUserR")
                        .WithMany("ReviewsU")
                        .HasForeignKey("review_UserId");

                    b.Navigation("AppUserR");
                });

            modelBuilder.Entity("Food.Entity.SubReview", b =>
                {
                    b.HasOne("Food.Entity.AppUser", "AppUserSR")
                        .WithMany("SubReviewSR")
                        .HasForeignKey("subReview_UserId");

                    b.Navigation("AppUserSR");
                });

            modelBuilder.Entity("Food.Entity.SubReviewInReview", b =>
                {
                    b.HasOne("Food.Entity.Reviews", "Reviews")
                        .WithMany("SubReviewInReview")
                        .HasForeignKey("SRiR_ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Food.Entity.SubReview", "SubReview")
                        .WithMany("SubReviewInReview")
                        .HasForeignKey("SRiR_SubReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("SubReview");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Food.Entity.Cart", b =>
                {
                    b.Navigation("ProductInCartC");
                });

            modelBuilder.Entity("Food.Entity.CartsDevice", b =>
                {
                    b.Navigation("ProductInCartDevicesCD");
                });

            modelBuilder.Entity("Food.Entity.Categories", b =>
                {
                    b.Navigation("ProductsInCategoriesC");
                });

            modelBuilder.Entity("Food.Entity.Device", b =>
                {
                    b.Navigation("CartsDeviceD");
                });

            modelBuilder.Entity("Food.Entity.Products", b =>
                {
                    b.Navigation("ProductInCartDevicesP");

                    b.Navigation("ProductInCartP");

                    b.Navigation("ProductsInCategoriesP");

                    b.Navigation("ReviewInproductP");
                });

            modelBuilder.Entity("Food.Entity.Reviews", b =>
                {
                    b.Navigation("ReviewInproductR");

                    b.Navigation("SubReviewInReview");
                });

            modelBuilder.Entity("Food.Entity.SubReview", b =>
                {
                    b.Navigation("SubReviewInReview");
                });

            modelBuilder.Entity("Food.Entity.AppUser", b =>
                {
                    b.Navigation("BillsAU");

                    b.Navigation("CartU");

                    b.Navigation("ReviewsU");

                    b.Navigation("SubReviewSR");
                });
#pragma warning restore 612, 618
        }
    }
}
